LOAD CSV WITH HEADERS FROM "file:///products.csv" AS row
CREATE (n:Product)
SET n = row,
  n.unitPrice = toFloat(row.unitPrice),
  n.unitsInStock = toInteger(row.unitsInStock), n.unitsOnOrder = toInteger(row.unitsOnOrder),
  n.reorderLevel = toInteger(row.reorderLevel), n.discontinued = (row.discontinued <> "0")

LOAD CSV WITH HEADERS FROM "http://data.neo4j.com/northwind/categories.csv" AS row
CREATE (n:Category)
SET n = row

LOAD CSV WITH HEADERS FROM "http://data.neo4j.com/northwind/suppliers.csv" AS row
CREATE (n:Supplier)
SET n = row

Create indexes
CREATE INDEX ON :Product(productID)
CREATE INDEX ON :Category(categoryID)
CREATE INDEX ON :Supplier(supplierID)

MATCH (p:Product),(c:Category)
WHERE p.categoryID = c.categoryID
CREATE (p)-[:PART_OF]->(c)

//==================================================================================================================================================
MATCH(n) DETACH DELETE(n);

LOAD CSV WITH HEADERS FROM "file:///src_tbl.csv" AS row 
CREATE (n:SRC) 
SET n = row,
  n.src_tbl_id = toInteger(row.src_tbl_id);

LOAD CSV WITH HEADERS FROM "file:///xv.csv" AS row
CREATE (n:TXV)
SET n = row,
  n.xv_id = toInteger(row.xv_id);

LOAD CSV WITH HEADERS FROM "file:///tgt_tbl.csv" AS row
CREATE (n:TGT)
SET n = row,
  n.tgt_tbl_id = toInteger(row.tgt_tbl_id);

LOAD CSV WITH HEADERS FROM "file:///src_to_tgt.csv" AS row
CREATE (n:SRC_TXV_TGT)
SET n = row,
  n.rel_id = toInteger(row.rel_id),
  n.src_tbl_id = toInteger(row.src_tbl_id),
  n.xv_id = toInteger(row.xv_id),
  n.tgt_tbl_id = toInteger(row.tgt_tbl_id);

CREATE INDEX ON :SRC(src_tbl_id);
CREATE INDEX ON :TXV(xv_id);
CREATE INDEX ON :TGT(tgt_tbl_id);
CREATE INDEX ON :SRC_TXV_TGT(rel_id);

MATCH (s2t:SRC_TXV_TGT),(s:SRC) WHERE s2t.src_tbl_id = s.src_tbl_id CREATE (s2t)-[:USES]->(s);
MATCH (s2t:SRC_TXV_TGT),(x:TXV) WHERE s2t.xv = x.xv_id CREATE (s2t)-[:USES]->(x);
MATCH (s2t:SRC_TXV_TGT),(t:TGT) WHERE s2t.tgt_tbl_id = t.tgt_tbl_id CREATE (s2t)-[:USES]->(t);

//========================================================================================================================================================
WITH split(toLower(""), " ") AS text
UNWIND range(0,size(text)-2) AS i
MERGE (w1:Word {name: text[i]})
MERGE (w2:Word {name: text[i+1]})
MERGE (w1)-[r:NEXT]->(w2)

WITH split(toLower(""), " ") AS text
UNWIND range(0,size(text)-2) AS i
MERGE (w1:Word {name: text[i]})
MERGE (w2:Word {name: text[i+1]})
MERGE (w1)-[r:NEXT]->(w2)
 ON CREATE SET r.count = 1
 ON MATCH SET r.count = r.count+1

MATCH (s:Word)
// Get right1, left1
MATCH (w:Word)-[:NEXT_WORD]->(s)
WITH collect(DISTINCT w.word) as left1, s
MATCH (w:Word)<-[:NEXT_WORD]-(s)
WITH left1, s, collect(DISTINCT w.word) as right1
// Match every other word
MATCH (o:Word) WHERE NOT s = o
WITH left1, right1, s, o
// Get other right, other left1
MATCH (w:Word)-[:NEXT_WORD]->(o)
WITH collect(DISTINCT w.word) as left1_o, s, o, right1, left1
MATCH (w:Word)<-[:NEXT_WORD]-(o)
WITH left1_o, s, o, right1, left1, collect(DISTINCT w.word) as right1_o
// compute right1 union, intersect
WITH FILTER(x IN right1 WHERE x IN right1_o) as r1_intersect,
  (right1 + right1_o) AS r1_union, s, o, right1, left1, right1_o, left1_o
// compute left1 union, intersect
WITH FILTER(x IN left1 WHERE x IN left1_o) as l1_intersect,
  (left1 + left1_o) AS l1_union, r1_intersect, r1_union, s, o
WITH DISTINCT r1_union as r1_union, l1_union as l1_union, r1_intersect, l1_intersect, s, o
WITH 1.0*length(r1_intersect) / length(r1_union) as r1_jaccard,
  1.0*length(l1_intersect) / length(l1_union) as l1_jaccard,
  s, o
WITH s, o, r1_jaccard, l1_jaccard, r1_jaccard + l1_jaccard as sim
CREATE UNIQUE (s)-[r:RELATED_TO]->(o) SET r.paradig = sim;

